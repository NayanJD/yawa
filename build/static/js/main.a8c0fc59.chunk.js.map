{"version":3,"sources":["images/night.png","components/TemperatureDaily.js","components/StatisticsMenu.js","components/WeatherDataArea.js","api/WeatherDataApi.js","api/apiConfig.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","TemperatureDaily","data","console","log","width","height","margin","left","strokeDasharray","dataKey","type","domain","stroke","getStockGraph","days","StatisticsMenu","useState","y","x","menu","setMenu","changeDataPoint","Row","className","Dropdown","Toggle","variant","id","Menu","Item","onClick","href","style","maxWidth","maxHeight","Col","now","toLowerCase","map","item","index","Date","getDay","getHours","getMinutes","getGraph","require","emptyCitynameText","fontSize","textAlign","WeatherDataArea","weatherLayout","timerInterval","initialTime","city","cityDetail","setCityDetail","timerRef","useRef","useEffect","addr","Promise","resolve","reject","fetch","replace","mapAddrToUrl","then","json","catch","err","currently","time","setInterval","current","innerHTML","millis","tz","toLocaleString","timeZone","split","localedate","hour","minutes","seconds","timerDisplay","timezone","clearInterval","daily","hourly","xs","md","formatted_address","ref","summary","apparentTemperature","humidity","getWeatherLayout","App","props","inputEl","searchCol","window","innerWidth","windowSize","setWindowSize","cityname","setCityname","weatherDisplayArea","setWeatherDisplayArea","getDataOnClick","value","tree","TimelineLite","resizeListener","innerHeight","document","addEventListener","e","code","focus","removeEventListener","Container","fluid","classnames","span","offset","InputGroup","FormControl","placeholder","aria-label","aria-describedby","color","onFocus","to","flex","marginLeft","onBlur","onChange","Append","Button","target","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,mC,2NC4C5BC,EATU,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAGvB,OAFAC,QAAQC,IAAI,sCACZD,QAAQC,IAAIF,GACL,oCAnBW,SAACA,GAEnB,OACY,kBAAC,IAAD,CAAYG,MAAO,IAAKC,OAAQ,IAAKJ,KAAMA,EACvCK,OAAQ,CAAEC,KAAM,IAChB,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,MACf,kBAAC,IAAD,CAAOC,KAAK,SAASC,OAAQ,CAAC,UAAW,aACzC,kBAAC,IAAD,MACA,kBAAC,IAAD,MAEA,kBAAC,IAAD,CAAMD,KAAK,WAAWD,QAAQ,IAAIG,OAAO,aASpDC,CAAcZ,K,mjBC/BvB,IAAMa,EAAO,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OA+EnCC,EAhDQ,SAAC,GAAY,IAAXd,EAAU,EAAVA,KAErBC,QAAQC,IAAI,0BAFmB,MAIRa,mBAAS,CAACC,EAAI,cAAeC,EAAG,UAJxB,mBAIxBC,EAJwB,KAInBC,EAJmB,KAMzBC,EAAkB,SAACX,GACrBU,EAAQ,EAAD,GAAKD,EAAL,CAAUF,EAAIP,MAGzB,OAAQ,oCAEJ,kBAACY,EAAA,EAAD,CAAKC,UAAU,aACP,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUC,GAAG,kBACjCR,EAAKF,GAGV,kBAACO,EAAA,EAASI,KAAV,KACI,kBAACJ,EAAA,EAASK,KAAV,CAAeC,QAAS,kBAAIT,EAAgB,iBAA5C,eACA,kBAACG,EAAA,EAASK,KAAV,CAAeC,QAAS,kBAAIT,EAAgB,cAA5C,YACA,kBAACG,EAAA,EAASK,KAAV,CAAeC,QAAS,kBAAIT,EAAgB,gBAA5C,iBAKZ,kBAACC,EAAA,EAAD,CAAKC,UAAU,QACX,wBAAIA,UAAU,gBACV,wBAAIA,UAAU,YACV,uBAAGA,UAAS,mBAA0B,UAAXJ,EAAKD,EAAe,SAAS,IAAMa,KAAK,IAAID,QAAS,kBAAMV,EAAQ,EAAD,GAAKD,EAAL,CAAWD,EAAI,aAA5G,UAEJ,wBAAIK,UAAU,YACV,uBAAGA,UAAS,mBAA0B,WAAXJ,EAAKD,EAAgB,SAAS,IAAMa,KAAK,IAAID,QAAS,kBAAMV,EAAQ,EAAD,GAAKD,EAAL,CAAWD,EAAI,cAA7G,aAIZ,kBAACI,EAAA,EAAD,CAAKC,UAAY,qBAAqBS,MAAO,CAACC,SAAU,OAAOC,UAAW,SACtE,kBAACC,EAAA,EAAD,KAhEC,SAAClC,EAAKiB,EAAED,GAYrB,IAAImB,EACJ,MAZS,gBAANnB,GAA6B,UAANC,GACtBD,EAAI,kBACJC,EAAE,wBAEFD,EAAIA,EAAEoB,cACNnB,EAAI,QAERhB,QAAQC,IAAI,KAAOc,GACnBf,QAAQC,IAAI,KAAOe,GACnBhB,QAAQC,IAAIF,GAGL,kBAAC,EAAD,CACKA,KAAMA,EAAKqC,IAAI,SAACC,EAAKC,GAEjB,MAAQ,UAALtB,EACQ,CAACA,EAAIJ,EAAM,IAAI2B,KAAa,IAARF,EAAKrB,IAAWwB,UACvCzB,EAAGsB,EAAKtB,IAGL,CAACC,GADRkB,EAAM,IAAIK,KAAa,IAARF,EAAKrB,KACJyB,WAAa,IAAMP,EAAIQ,aACnC3B,EAAGsB,EAAKtB,QA2Cf4B,CAAS5C,EAAKkB,EAAKD,GAAGC,EAAKD,EAAEC,EAAKF,O,4NCjEzC6B,EAAQ,KAAtB,IAuDMC,EAAoB,WACtB,OAAO,uBAAGxB,UAAU,gCAAgCS,MAAO,CAACgB,SAAW,OAAOC,UAAW,WAAlF,WACS,0BAAM1B,UAAU,gCAAhB,6BADT,wKAC6P,0BAAMA,UAAY,eAAlB,aAwDzP2B,EAnDS,SAAC,GAAY,IAM7BC,EAaAC,EAAcC,EAnBIC,EAAU,EAAVA,KAAU,EAEGtC,mBAAS,MAFZ,mBAEzBuC,EAFyB,KAEdC,EAFc,KAI1BC,EAAWC,iBAAO,MAmCxB,OA/BAC,oBAAU,WC9EgB,IAACC,ED+EvB1D,QAAQC,IAAI,gBACD,KAARmD,IChFoBM,EDiFJN,EChFhB,IAAIO,QAAQ,SAACC,EAAQC,GACxBC,MCJa,SAACJ,GAElB,MAJY,oFAGZA,EAAOA,EAAKK,QAAQ,IAAI,MDGdC,CAAaN,IACdO,KAAK,SAAAlE,GAAI,OAAGA,EAAKmE,SACjBD,KAAK,SAAAlE,GAAI,OAAI6D,EAAQ7D,KACrBoE,MAAM,SAAAC,GAAG,OAAIP,EAAOO,QD6EhBH,KAAK,SAAAlE,GAEFuD,E,qVAAc,IAAIvD,MAErBoE,MAAM,SAAAC,GAAG,OAAIpE,QAAQC,IAAImE,MACpC,CAAChB,IAGHK,oBAAU,WAGN,GAFAzD,QAAQC,IAAI,uBACZD,QAAQC,IAAIoD,GACTA,EAQC,OAPAF,EAAcE,EAAWgB,UAAUC,KACnCpB,EAAgBqB,YAAY,WACxBhB,EAASiB,QAAQC,UAlFZ,SAACC,EAAOC,GACzB,IADgC,EACrB,IAAIpC,KAAY,IAAPmC,GACiBE,eAAe,QAAQ,CAACC,SAAWF,IAAKG,MAAM,KAFnD,mBAEzBC,EAFyB,YAIUD,MAAM,KAJhB,mBAIzBE,EAJyB,KAIpBC,EAJoB,KAIZC,EAJY,KAMhC,MAAM,GAAN,OAAUH,EAAV,aAAyBC,EAAzB,YAAiCC,EAAjC,YAA4CC,GA4EHC,CAAahC,EAAYE,EAAW+B,UACjEjC,GAA4B,GAE9B,KAEK,WACHkC,cAAcnC,KAGxB,CAACG,IAEHJ,EApFqB,SAAClD,EAAKwD,GAI3B,GAAY,OAATxD,EACC,OAAO8C,IAEX,IAAIwB,EAAYtE,EAAKsE,UACjBiB,EAAQvF,EAAKuF,MAAMvF,KACnBwF,EAASxF,EAAKwF,OAAOxF,KAEzB,OAAO,oCAEC,kBAACqB,EAAA,EAAD,CAAKC,UAAU,IACX,kBAACY,EAAA,EAAD,CAAKuD,GAAI,GAAIC,GAAI,EAAGpE,UAAU,IAC1B,wBAAIA,UAAY,qBACXtB,EAAK2F,oBAGd,kBAACzD,EAAA,EAAD,CAAKuD,GAAI,GAAIC,GAAI,EAAGE,IAAKpC,EAAUlC,UAAU,GAAGS,MAAO,CAACgB,SAAW,WAIvE,kBAAC1B,EAAA,EAAD,CAAKC,UAAU,IACX,kBAACY,EAAA,EAAD,CAAKuD,GAAI,EAAGC,GAAI,EAAGpE,UAAY,qBAA/B,aACegD,EAAUuB,SAEzB,kBAAC3D,EAAA,EAAD,CAAKuD,GAAI,EAAGC,GAAI,EAAGpE,UAAY,qBAA/B,iBACmBgD,EAAUwB,qBAE7B,kBAAC5D,EAAA,EAAD,CAAKuD,GAAI,EAAGC,GAAI,EAAGpE,UAAY,qBAA/B,cACgBgD,EAAUyB,WAI9B,kBAAC,EAAD,CAAgB/F,KAAM,CAACuF,MAAQA,EAAOC,OAASA,MAiDvCQ,CAAiB1C,EAAWE,GAEpC,oCACA,kBAACnC,EAAA,EAAD,CAAKC,UAAU,qBAAqBS,MAAO,CAACE,UAAU,UAClD,kBAACC,EAAA,EAAD,KACKgB,MG0BN+C,EA9HH,SAACC,GACT,IAAMC,EAAU1C,iBAAO,MACjB2C,EAAY3C,iBAAO,MAFN,EAMiB1C,mBAAS,CAACZ,MAAQkG,OAAOC,aAN1C,mBAMZC,EANY,KAMAC,EANA,OAQazF,mBAAS,IARtB,mBAQZ0F,EARY,KAQFC,EARE,OAUgC3F,mBAAS,kBAAC,EAAD,CAAiBsC,KAAK,MAV/D,mBAUZsD,EAVY,KAUOC,EAVP,KAYbC,EAAiB,WAEnBH,EAAYP,EAAQ1B,QAAQqC,QAG1BC,EAAO,IAAIC,IAEXC,EAAiB,WAEnBT,EAAc,CACVrG,MAAQkG,OAAOC,WACflG,OAASiG,OAAOa,eAKxBxD,oBAAU,WAWN,OATAzD,QAAQC,IAAI,iBAGZiH,SAASC,iBAAiB,UAAU,SAAAC,GAAC,MAAe,UAAXA,EAAEC,KAAmBT,IAAiB,YAE/ER,OAAOe,iBAAiB,SAASH,GAEjCd,EAAQ1B,QAAQ8C,QAET,WACHlB,OAAOmB,oBAAoB,SAASP,KAE1C,IAGFvD,oBAAU,WAENkD,EAAsB,kBAAC,EAAD,CAAiBvD,KAAMoD,MAC/C,CAACA,IAyBH,OAAQ,oCACA,kBAACgB,EAAA,EAAD,CAAWC,MAAM,QACjB,kBAACrG,EAAA,EAAD,CAAKC,UAAU,gBACX,kBAACY,EAAA,EAAD,CAAKuD,GAAI,GAAIC,GAAI,EAAGpE,UAAWqG,IAAW,cAAc,gBAAgB,YACpE,0BAAMrG,UAAU,MAAhB,QAGA,2BAAOA,UAAU,cAAjB,4BAIJ,kBAACY,EAAA,EAAD,CAAKuD,GAAI,GAAIC,GAAI,CAACkC,KAAO,EAAGC,OAAO,GAAIjC,IAAKQ,GACxC,kBAAC0B,EAAA,EAAD,CAAYxG,UAAU,gBAElB,kBAACyG,EAAA,EAAD,CACIC,YAAY,iBACZC,aAAW,WACXC,mBAAiB,eACjB5G,UAAU,uBACVS,MAAO,CAACoG,MAAM,SACdC,QA3CG,WAGL,OAAf7B,GAAuBA,EAAWpG,MAAQ,KACzC4G,EAAKsB,GAAGjC,EAAU3B,QAAQ,GAAI,CAC1B6D,KAAM,iBACNtG,SAAU,aACVuG,WAAY,SAqCAC,OAlCE,WACJ,OAAfjC,GAAuBA,EAAWpG,MAAQ,KACzC4G,EAAKsB,GAAGjC,EAAU3B,QAAQ,GAAI,CAC1B6D,KAAM,UACNtG,SAAU,MACVuG,WAAY,gBA8BAE,SA3BJ,SAACpB,KA4BGzB,IAAKO,IAET,kBAAC2B,EAAA,EAAWY,OAAZ,KACI,kBAACC,EAAA,EAAD,CACIlI,KAAK,SACLa,UAAU,MACVG,QAAQ,QACRI,QAASgF,GAJb,gBAUfF,GAID,4BAAQrF,UAAU,UAClB,yBAAKA,UAAU,eACX,0BAAMA,UAAU,eACZ,uBAAIsH,OAAO,SAAQ9G,KAAK,kCAAxB,4BCxHA+G,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2D,cCVNC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASgC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpF,KAAK,SAAAqF,GACjCA,EAAaC,iB","file":"static/js/main.a8c0fc59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/night.8f7fd057.png\";","import {Col,\r\n    Row,\r\n    Container,\r\n    InputGroup,\r\n    FormControl,\r\n    Button} from 'react-bootstrap'\r\nimport classnames from 'classnames'\r\nimport React,\r\n    {useRef, useEffect, useState} from 'react'\r\nimport {ResponsiveContainer,\r\n        LineChart,\r\n        XAxis,\r\n        YAxis,\r\n        Legend,\r\n        Line,\r\n        CartesianGrid,\r\n        Tooltip} from 'recharts'\r\nimport {getStockTimeSeries} from '../api/WeatherDataApi'\r\n\r\nconst getStockGraph = (data) => {\r\n\r\n    return (//<ResponsiveContainer width={700} height='100%' >\r\n                <LineChart  width={750} height={250} data={data}\r\n                    margin={{ left: 5}}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"x\" />\r\n                    <YAxis type=\"number\" domain={['dataMin', 'dataMax']}/>\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    {/* <Line type=\"monotone\" dataKey=\"open\" stroke=\"#8884d8\" /> */}\r\n                    <Line type=\"monotone\" dataKey=\"y\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n            //</ResponsiveContainer>\r\n    )\r\n}\r\nconst TemperatureDaily = ({data}) => {\r\n    console.log('Temperature Graph Component Loaded')\r\n    console.log(data)\r\n    return <>\r\n        {getStockGraph(data)}\r\n            \r\n    </>   \r\n}\r\n\r\nexport default TemperatureDaily","import {Col,\r\n    Row,\r\n    Dropdown} from 'react-bootstrap'\r\nimport classnames from 'classnames'\r\nimport React,\r\n    {useRef, useEffect, useState} from 'react'\r\nimport TemperatureDaily from './TemperatureDaily'\r\n\r\nconst days = ['Sun','Mon','Tue','Wed','Thr','Fri','Sat']\r\n\r\nconst months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\r\n\r\nconst getGraph = (data,x,y) => {\r\n    if(y === 'Temperature' && x === 'daily'){\r\n        y = 'temperatureHigh'\r\n        x='temperatureHighTime'\r\n    }else{\r\n        y = y.toLowerCase()\r\n        x = 'time'\r\n    }\r\n    console.log('y ' + y)\r\n    console.log('x ' + x)\r\n    console.log(data)\r\n\r\n    let now\r\n    return <TemperatureDaily \r\n                data={data.map((item,index) => {\r\n                    //console.log(item.temperatureHighTime)\r\n                    if(x ==='daily')\r\n                        return {x : days[(new Date(item[x]*1000 )).getDay()],\r\n                            y :item[y]}\r\n                    else{\r\n                        now = new Date(item[x]*1000 )\r\n                        return {x : now.getHours() + ':' + now.getMinutes(),\r\n                            y :item[y]}\r\n                    }\r\n                })}\r\n            />\r\n}\r\nconst StatisticsMenu = ({data}) => {\r\n\r\n    console.log('Statistics Menu Loaded')\r\n    \r\n    const [menu,setMenu] = useState({y : 'Temperature', x :'daily'})\r\n\r\n    const changeDataPoint = (type) => {\r\n        setMenu({...menu,y : type})\r\n    }\r\n\r\n    return (<>\r\n        \r\n        <Row className='ml-2 my-2'>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                        {menu.y}\r\n                    </Dropdown.Toggle>\r\n                    \r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={()=>changeDataPoint('Temperature')}>Temperature</Dropdown.Item>\r\n                        <Dropdown.Item onClick={()=>changeDataPoint('Humidity')}>Humidity</Dropdown.Item>\r\n                        <Dropdown.Item onClick={()=>changeDataPoint('visibility')}>Visibility</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                \r\n            </Row>\r\n            <Row className='my-2'>\r\n                <ul className=\"nav nav-tabs\">\r\n                    <li className=\"nav-item\">\r\n                        <a className={`nav-link ${(menu.x === 'daily')?'active':''}`} href=\"#\" onClick={() => setMenu({...menu, x : 'daily'})}>Daily</a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className={`nav-link ${(menu.x === 'hourly')?'active':''}`} href=\"#\" onClick={() => setMenu({...menu, x : 'hourly'})}>Hourly</a>\r\n                    </li>\r\n                </ul>\r\n            </Row>     \r\n            <Row className = 'my-3 overflow-auto' style={{maxWidth: '100%',maxHeight: '100%'}}>\r\n                <Col >\r\n                    {getGraph(data[menu.x],menu.x,menu.y)}\r\n                </Col>\r\n            </Row>\r\n                \r\n            \r\n            \r\n    \r\n    </>)\r\n}\r\n\r\nexport default StatisticsMenu","import {Col,\r\n    Row,\r\n    Dropdown} from 'react-bootstrap'\r\nimport classnames from 'classnames'\r\nimport React,\r\n    {useRef, useEffect, useState} from 'react'\r\nimport {TimelineLite} from 'gsap'\r\nimport {getLatLong, getWeatherData} from '../api/WeatherDataApi'\r\nimport StatisticsMenu from './StatisticsMenu.js'\r\nimport TemperatureDaily from './TemperatureDaily';\r\n\r\n\r\nconst Night = require('../images/night.png')\r\n\r\nconst days = ['Sun','Mon','Tue','Wed','Thr','Fri','Sat']\r\n\r\nconst months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\r\n\r\nconst timerDisplay = (millis,tz) => {\r\n    let date = new Date(millis*1000)\r\n    const [localedate,localetime] = date.toLocaleString('en-US',{timeZone : tz}).split(',')\r\n    \r\n    const [hour,minutes,seconds] = localetime.split(':')\r\n    \r\n    return `${localedate}, ${hour}:${minutes}:${seconds}` \r\n}\r\n\r\nconst getWeatherLayout = (data,timerRef) => {\r\n\r\n   \r\n\r\n    if(data === null)\r\n        return emptyCitynameText()\r\n    \r\n    let currently = data.currently\r\n    let daily = data.daily.data\r\n    let hourly = data.hourly.data\r\n\r\n    return <>\r\n        {/* <img src={Night} alt=\"Logo\" />; */}\r\n            <Row className=''>\r\n                <Col xs={12} md={8} className='' >\r\n                    <h1 className = 'font-weight-light'>\r\n                        {data.formatted_address}\r\n                    </h1>\r\n                </Col>\r\n                <Col xs={12} md={4} ref={timerRef} className='' style={{fontSize : '2rem'}}>\r\n                    {}\r\n                </Col>\r\n            </Row>\r\n            <Row className=''>\r\n                <Col xs={6} md={2} className = 'font-weight-light'>\r\n                    Summary : {currently.summary}\r\n                </Col>\r\n                <Col xs={6} md={2} className = 'font-weight-light'>\r\n                    Temperature : {currently.apparentTemperature}\r\n                </Col>\r\n                <Col xs={6} md={2} className = 'font-weight-light'>\r\n                    Humidity : {currently.humidity}\r\n                </Col>\r\n            </Row>\r\n            \r\n            <StatisticsMenu data={{daily : daily, hourly : hourly}} />\r\n        \r\n    </>\r\n}\r\n//<StatisticsMenu data={{daily : daily, hourly : hourly}} />\r\nconst emptyCitynameText = () => {\r\n    return <p className='font-weight-light description' style={{fontSize : '2rem',textAlign :'center'}}>\r\n            This is <span className='font-weight-bold font-italic'>\"Yet Another Weather App\"</span> built using DarkSky Api and Google Geocoding Api to learn ReactJs. Enter any city name above in the searchbox to get the weather and other useful data in the area. <span className = 'font-italic'>Cheers!</span>\r\n            \r\n        </p>\r\n\r\n}\r\nconst WeatherDataArea = ({city}) => {\r\n\r\n    const [cityDetail,setCityDetail] = useState(null)\r\n\r\n    const timerRef = useRef(null)\r\n\r\n    let weatherLayout\r\n\r\n    useEffect(()=> {\r\n        console.log('City Changed')\r\n        if(city !=='')\r\n            getWeatherData(city)\r\n                .then(data => {\r\n                    // console.log(data)\r\n                    setCityDetail({...data})\r\n                })\r\n                .catch(err => console.log(err))\r\n    },[city])\r\n\r\n    let timerInterval,initialTime\r\n    useEffect(() => {\r\n        console.log('City detail changed')\r\n        console.log(cityDetail)\r\n        if(cityDetail){\r\n            initialTime = cityDetail.currently.time \r\n            timerInterval = setInterval(() => {\r\n                timerRef.current.innerHTML = timerDisplay(initialTime,cityDetail.timezone)\r\n                initialTime = initialTime + 1\r\n                // counter = 1 - counter\r\n            },1000)\r\n\r\n            return () => {\r\n                clearInterval(timerInterval)\r\n            }\r\n        }\r\n    },[cityDetail])\r\n    \r\n    weatherLayout = getWeatherLayout(cityDetail,timerRef)\r\n\r\n    return (<>\r\n            <Row className='my-1 overflow-auto' style={{maxHeight:'500px'}}>\r\n                <Col>\r\n                    {weatherLayout}  \r\n                </Col>\r\n                \r\n            </Row>\r\n\r\n    </>)\r\n}\r\n\r\n\r\nexport default WeatherDataArea","import {\r\n    mapAddrToUrl\r\n} from './apiConfig'\r\n\r\nexport const getWeatherData = (addr) => {\r\n    return new Promise((resolve,reject) => {\r\n        fetch(mapAddrToUrl(addr))\r\n            .then(data =>data.json())\r\n            .then(data => resolve(data))\r\n            .catch(err => reject(err))\r\n    })\r\n}","const weatherUrl = `http://notesappwithnode.ap-south-1.elasticbeanstalk.com/weather/geocode?address=`\r\n\r\nconst mapAddrToUrl = (addr) => {\r\n    addr = addr.replace(' ','+')\r\n    return weatherUrl + addr\r\n}\r\n\r\nexport {\r\n    mapAddrToUrl\r\n}","import {Col,\r\n        Row,\r\n        Container,\r\n        InputGroup,\r\n        FormControl,\r\n        Button} from 'react-bootstrap'\r\nimport classnames from 'classnames'\r\nimport React,\r\n        {useRef,\r\n        useState,\r\n        useEffect} from 'react'\r\nimport {TimelineLite} from 'gsap'\r\nimport WeatherDataArea from './WeatherDataArea'\r\n\r\n\r\n\r\nconst App = (props) => {\r\n    const inputEl = useRef(null)\r\n    const searchCol = useRef(null)\r\n    \r\n\r\n    //Keep size state for windows\r\n    const [windowSize, setWindowSize] = useState({width : window.innerWidth})\r\n\r\n    const [cityname, setCityname] = useState('')\r\n\r\n    const [weatherDisplayArea,setWeatherDisplayArea] = useState(<WeatherDataArea city=''/>)\r\n\r\n    const getDataOnClick = () =>{\r\n        // console.log(inputEl.current.value)\r\n        setCityname(inputEl.current.value)\r\n    }\r\n    \r\n    const tree = new TimelineLite()\r\n\r\n    const resizeListener = () => {\r\n        // console.log(window.innerWidth)\r\n        setWindowSize({\r\n            width : window.innerWidth,\r\n            height : window.innerHeight\r\n        })\r\n    }\r\n\r\n    //The Effect to detect window width and height for small devices\r\n    useEffect(() => {\r\n\r\n        console.log('App.js loaded')\r\n\r\n        //listener for enter keypress\r\n        document.addEventListener('keydown',e => e.code === 'Enter' ? getDataOnClick():'nothing')\r\n\r\n        window.addEventListener('resize',resizeListener)\r\n\r\n        inputEl.current.focus()\r\n\r\n        return () => {\r\n            window.removeEventListener('resize',resizeListener)\r\n        }\r\n    },[])\r\n\r\n    \r\n    useEffect(() => {\r\n        // console.log('cityname changed')\r\n        setWeatherDisplayArea(<WeatherDataArea city={cityname}/>)\r\n    },[cityname])\r\n\r\n    const searchInputOnFocus = () =>{\r\n\r\n        //prevent search resizing animation for xs devices\r\n        if(windowSize !== null && windowSize.width > 768)\r\n            tree.to(searchCol.current,0.7,{\r\n                flex: '0 0 41.666667%',\r\n                maxWidth: '41.666667%',\r\n                marginLeft: '25%'})\r\n    }\r\n\r\n    const searchInputOnBlur = () => {\r\n        if(windowSize !== null && windowSize.width > 768)\r\n            tree.to(searchCol.current,0.7,{\r\n                flex: '0 0 25%',\r\n                maxWidth: '25%',\r\n                marginLeft: '41.666667%'})\r\n    }\r\n\r\n    const searchValue = (e) => {\r\n        // console.log(e.target.value)\r\n        //setCityname(e.target.value)\r\n    }\r\n\r\n    return( <>\r\n            <Container fluid='true'>\r\n            <Row className='bg-dark py-0'>\r\n                <Col xs={12} md={4} className={classnames('text-center','finapp-header','py-auto')}>\r\n                    <span className='h1'>\r\n                        YAWA\r\n                    </span>\r\n                    <small className='text-muted'>yet another weather App</small>\r\n                    \r\n                </Col>\r\n                \r\n                <Col xs={12} md={{span : 3, offset:5}} ref={searchCol}>\r\n                    <InputGroup className=\"mt-md-2 mb-3\">\r\n                        \r\n                        <FormControl\r\n                            placeholder=\"Enter the city\"\r\n                            aria-label=\"Username\"\r\n                            aria-describedby=\"basic-addon1\" \r\n                            className='bg-dark search-input'\r\n                            style={{color:'white'}}\r\n                            onFocus={searchInputOnFocus}\r\n                            onBlur={searchInputOnBlur}\r\n                            onChange={searchValue}\r\n                            ref={inputEl}\r\n                        />\r\n                        <InputGroup.Append>\r\n                            <Button \r\n                                type='submit' \r\n                                className=\"btn\" \r\n                                variant=\"light\"\r\n                                onClick={getDataOnClick}>Get Data</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Col>\r\n            </Row>\r\n            \r\n            {weatherDisplayArea}\r\n        \r\n            \r\n            </Container>\r\n            <footer className=\"footer\">\r\n            <div className=\"text-center\">\r\n                <span className=\"text-muted \">\r\n                    <a  target='_blank'href='https://darksky.net/poweredby/'>Powered by Dark Sky</a>\r\n                </span>\r\n            </div>\r\n            </footer>\r\n        \r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './styles/style.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}